# snakemake pipeline
#
# This file is part of sbpipe.
#
# sbpipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sbpipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with sbpipe.  If not, see <http://www.gnu.org/licenses/>.


"""
Author: Piero Dalle Pezze
Affiliation: The Babraham Institute (Cambridge, UK)
Aim: A Snakemake workflow to process Time Course simulation of a mathematical model.
Date: 26 Mar 2017
Run: snakemake -s sbpipe_sim.snake --configfile FILE
Latest modification:
    - first draft
"""

import sys
import os

# retrieve SBpipe package path
SBPIPE = os.path.abspath(os.path.join(__file__, os.pardir, os.pardir))
sys.path.insert(0, SBPIPE)

# Simulator
COPASI = False
if config['simulator'] == 'Copasi':
    COPASI = True

# Model and results folders
MODELS_FOLDER   = "Models"
MODEL           = os.path.join(MODELS_FOLDER , config['model'])
MODEL_NAME      = config['model'].split('.')[0]
REPORT_PREFIX   = "report_sim_"
WORKING_FOLDER  = os.path.join("Results", MODEL_NAME)
PREPROC_FOLDER  = "sim_preproc"
POSTPROC_FOLDER = "sim_postproc"
PLOTS_FOLDER    = "sim_plots"

# Extensions
MODEL_EXT       = "." + config['model'].split('.')[1]
CSV_EXT         = ".csv"
PNG_EXT         = ".png"
LATEX_EXT       = ".tex"
PDF_EXT         = ".pdf"
LOG_EXT         = ".log"

# Generate sequences
REPEATS     = range(1, int(config['runs'])+1)

# Report variables
VARIABLES = config['report_variables']

PLOT_TYPES = ['_mean', '_mean_sd', '_mean_sd_ci95']

# Plot types
#if config['plot_exp_dataset']:
#    PLOT_TYPES = PLOT_TYPES + ['_mean_w_exp_data', '_mean_sd_w_exp_data', '_mean_sd_ci95_w_exp_data']

if int(config['runs']) > 1:
    PLOT_TYPES = PLOT_TYPES + ['', '_heatmap', '_heatmap_scaled']


rule all:
    input:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + ".pdf")


rule sbpipe_preproc:
    input:
        file=MODEL
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    run:
        from sbpipe.tasks.preproc import preproc
        preproc(input.file, output.file, COPASI)


rule sbpipe_gen_data:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    run:
        from sbpipe.tasks.generate_data import generate_data
        generate_data(input.file, COPASI)


rule sbpipe_sim_postproc:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    run:
        from sbpipe.tasks.sim_postproc import sim_postproc
        sim_postproc(input.file, output.file, COPASI)


rule sbpipe_sim_analysis:
    input:
        file=expand(os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT), rep=REPEATS)
    output:
        # note: we mask var as a wildcard. Doing so, we can "replicate" this rule for each var in VARIABLES (see following rule input)
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_{{var}}{type}" + PNG_EXT), type=PLOT_TYPES)
    params:
        models_folder=MODELS_FOLDER,
        model_name=MODEL_NAME,
        outputdir=WORKING_FOLDER,
        sim_data_folder=POSTPROC_FOLDER,
        sim_plots_folder=PLOTS_FOLDER,
        exp_dataset=config["exp_dataset"],
        plot_exp_dataset=config["plot_exp_dataset"],
        exp_dataset_alpha=config["exp_dataset_alpha"],
        xaxis_label=config["xaxis_label"],
        yaxis_label=config["yaxis_label"]
    run:
        from sbpipe.tasks.sim_analyse_data import sim_analyse_data
        #print(wildcards.var)
        sim_analyse_data(params.model_name, \
                         os.path.join(params.outputdir, params.sim_data_folder), \
                         params.outputdir, \
                         os.path.join(params.outputdir, params.sim_plots_folder), \
                         wildcards.var, \
                         os.path.join(params.models_folder, params.exp_dataset), \
                         str(params.plot_exp_dataset), \
                         str(params.exp_dataset_alpha), \
                         params.xaxis_label, \
                         params.yaxis_label)


rule sbpipe_sim_latex_report:
    input:
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_{var}{type}" + PNG_EXT), var=VARIABLES, type=PLOT_TYPES)
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + ".tex")
    params:
        working_folder_dir=WORKING_FOLDER,
        plots_folder=PLOTS_FOLDER,
        report_prefix=REPORT_PREFIX,
        model_name=MODEL_NAME
    run:
        from sbpipe.report.latex_reports import latex_report_sim
        latex_report_sim(params.working_folder_dir, params.plots_folder, params.model_name, params.report_prefix)


rule sbpipe_pdf_report:
    input:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + ".tex")
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + ".pdf")
    params:
        working_folder_dir=WORKING_FOLDER,
        latex_file=REPORT_PREFIX + MODEL_NAME + LATEX_EXT
    run:
        from sbpipe.report.latex_reports import pdf_report
        pdf_report(params.working_folder_dir, params.latex_file)

