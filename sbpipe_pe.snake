# snakemake pipeline
#
# This file is part of sbpipe.
#
# sbpipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sbpipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with sbpipe.  If not, see <http://www.gnu.org/licenses/>.


"""
Author: Piero Dalle Pezze
Description: A Snakemake workflow to process parameter estimation of a mathematical model.
Run: snakemake -s sbpipe_pe.snake --configfile FILE
"""



import sys
import os

# retrieve SBpipe package path
SBPIPE = os.path.abspath(os.path.join(__file__, os.pardir, os.pardir))
sys.path.insert(0, SBPIPE)

# Simulator
COPASI = False
if config['simulator'] == 'Copasi':
    COPASI = True

# Model and results folders
MODELS_FOLDER   = "Models"
MODEL           = os.path.join(MODELS_FOLDER , config['model'])
MODEL_NAME      = config['model'].split('.')[0]
REPORT_PREFIX   = "report_pe_"
WORKING_FOLDER  = os.path.join("Results", MODEL_NAME)
PREPROC_FOLDER  = "pe_preproc"
POSTPROC_FOLDER = "pe_postproc"
PLOTS_FOLDER    = "pe_plots"

# Files
FINAL_ESTIM              = "final_estim_collection"
ALL_ESTIM                = "all_estim_collection"
FILE_PARAM_ESTIM_DETAILS = "param_estim_details"
FILE_PARAM_ESTIM_SUMMARY = "param_estim_summary"

# Extensions
MODEL_EXT       = "." + config['model'].split('.')[1]
CSV_EXT         = ".csv"
PNG_EXT         = ".png"
LATEX_EXT       = ".tex"
PDF_EXT         = ".pdf"
LOG_EXT         = ".log"

# Generate sequences
REPEATS     = range(1, int(config['runs'])+1)

# Report variables
VARIABLES = config['report_variables']

EXP_DATASET = config["exp_dataset"]



ALL_FITS_PLOTS = ['objval_vs_iter']
# Plot types
if config['plot_2d_66cl_corr']:
    for idx, var in enumerate(VARIABLES):
        for var2 in VARIABLES[idx+1:]:
            ALL_FITS_PLOTS.append('cl66_fits_' + var + '_' + var2)

if config['plot_2d_95cl_corr']:
    for idx, var in enumerate(VARIABLES):
        for var2 in VARIABLES[idx+1:]:
            ALL_FITS_PLOTS.append('cl95_fits_' + var + '_' + var2)

if config['plot_2d_99cl_corr']:
    for idx, var in enumerate(VARIABLES):
        for var2 in VARIABLES[idx+1:]:
            ALL_FITS_PLOTS.append('cl99_fits_' + var + '_' + var2)




rule all:
    input:
        file_best_fits_log10=os.path.join(WORKING_FOLDER, FINAL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(WORKING_FOLDER, FINAL_ESTIM + CSV_EXT),
        file_all_fits_log10 = os.path.join(WORKING_FOLDER, ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(WORKING_FOLDER, ALL_ESTIM + CSV_EXT),
        file_param_estim_summary = os.path.join(WORKING_FOLDER, "param_estim_summary" + CSV_EXT),
        approx_ple_plot=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_approx_ple_{var}" + PNG_EXT), var=VARIABLES),
        file_param_estim_details = os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_DETAILS + CSV_EXT),
        best_fits_plot=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_best_fits_{var}" + PNG_EXT), var=VARIABLES),
        cl66_plot=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl66_fits_{var}" + PNG_EXT), var=VARIABLES),
        cl95_plot=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl95_fits_{var}" + PNG_EXT), var=VARIABLES),
        cl99_plot=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl99_fits_{var}" + PNG_EXT), var=VARIABLES),
        all_plot=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_all_fits_{var}" + PNG_EXT), var=VARIABLES)


        # uncomment when finished
        #pdf=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + PDF_EXT)


rule copy_dataset:
    input:
        exp_dataset=os.path.join(MODELS_FOLDER, "{ds}")
    output:
        exp_dataset=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, "{ds}")
    run:
        from shutil import copyfile
        copyfile(input.exp_dataset,
                 output.exp_dataset)


rule sbpipe_preproc:
    input:
        file=MODEL
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    run:
        from sbpipe.tasks.preproc import preproc
        preproc(input.file,
                output.file,
                'Parameter Estimation',
                COPASI)


rule sbpipe_gen_data:
    input:
        exp_dataset=expand(os.path.join(WORKING_FOLDER, PREPROC_FOLDER, "{ds}"), ds=EXP_DATASET),
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    run:
        from sbpipe.tasks.generate_data import generate_data
        generate_data(input.file,
                      COPASI)


rule sbpipe_pe_postproc:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    run:
        from sbpipe.tasks.pe_postproc import pe_postproc
        pe_postproc(input.file,
                    output.file,
                    COPASI)


rule sbpipe_pe_collect:
    input:
        file=expand(os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT), rep=REPEATS)
    output:
        file_best_fits=os.path.join(WORKING_FOLDER, "final_estim_collection" + CSV_EXT),
        file_all_fits=os.path.join(WORKING_FOLDER, "all_estim_collection" + CSV_EXT)
    params:
        inputdir=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER),
        outputdir=WORKING_FOLDER
    run:
        from sbpipe.tasks.pe_collect import pe_collect
        pe_collect(params.inputdir,
                   params.outputdir,
                   os.path.basename(output.file_best_fits),
                   os.path.basename(output.file_all_fits))


rule sbpipe_pe_ds_preproc_final_estims:
    input:
        file=os.path.join(WORKING_FOLDER, FINAL_ESTIM + CSV_EXT)
    output:
        file_best_fits=os.path.join(WORKING_FOLDER, FINAL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(WORKING_FOLDER, FINAL_ESTIM + CSV_EXT)
    params:
        param_names=VARIABLES,
        logspace=config['logspace'],
        all_fits=False
    run:
        from sbpipe.tasks.pe_ds_preproc import pe_ds_preproc
        pe_ds_preproc(input.file,
                      params.param_names,
                      params.logspace,
                      params.all_fits)


rule sbpipe_pe_ds_preproc_all_estims:
    input:
        file=os.path.join(WORKING_FOLDER, ALL_ESTIM + CSV_EXT)
    output:
        file_all_fits=os.path.join(WORKING_FOLDER, ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(WORKING_FOLDER, ALL_ESTIM + CSV_EXT),
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
    params:
        param_names=VARIABLES,
        logspace=config['logspace'],
        all_fits=True,
        data_point_num=config['data_point_num']
    run:
        from sbpipe.tasks.pe_ds_preproc import pe_ds_preproc
        pe_ds_preproc(input.file,
                      params.param_names,
                      params.logspace,
                      params.all_fits,
                      params.data_point_num,
                      output.file_param_estim_summary)


rule sbpipe_pe_sampled_ple_analysis:
    input:
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT),
        file_all_fits=os.path.join(WORKING_FOLDER, ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(WORKING_FOLDER, ALL_ESTIM + CSV_EXT)
    output:
        approx_ple_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_approx_ple_{var}" + PNG_EXT),
        approx_ple_csv = os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_approx_ple_{var}" + CSV_EXT)
    params:
        model=MODEL_NAME,
        parameter="{var}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        logspace=config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.tasks.pe_sampled_ple_analysis import pe_sampled_ple_analysis
        pe_sampled_ple_analysis(params.model,
                                input.file_all_fits,
                                params.parameter,
                                params.plots_dir,
                                input.file_param_estim_summary,
                                params.logspace,
                                params.scientific_notation)


rule sbpipe_pe_combine_param_ple_stats:
    input:
        approx_ple_csv=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_approx_ple_{var}" + CSV_EXT), var=VARIABLES)
    output:
        file_param_estim_details=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_DETAILS + CSV_EXT)
    params:
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER)
    run:
        from sbpipe.tasks.pe_combine_param_ple_stats import pe_combine_param_ple_stats
        pe_combine_param_ple_stats(params.plots_dir,
                                   output.file_param_estim_details)


rule sbpipe_parameter_density_analysis_final_estim:
    input:
        file_best_fits=os.path.join(WORKING_FOLDER, FINAL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
    WORKING_FOLDER, FINAL_ESTIM + CSV_EXT),
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
    output:
        best_fits_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_best_fits_{var}" + PNG_EXT)
    params:
        model = MODEL_NAME,
        parameter = "{var}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        thres="BestFits",
        best_fits_percent = config['best_fits_percent'],
        logspace = config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.tasks.pe_parameter_density_analysis import pe_parameter_density_analysis
        pe_parameter_density_analysis(params.model,
                                      input.file_best_fits,
                                      params.parameter,
                                      input.file_param_estim_summary,
                                      params.plots_dir,
                                      params.thres,
                                      params.best_fits_percent,
                                      params.logspace,
                                      params.scientific_notation)


rule sbpipe_parameter_density_analysis_cl66_fits_estim:
    input:
        file_all_fits=os.path.join(WORKING_FOLDER, ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
    WORKING_FOLDER, ALL_ESTIM + CSV_EXT),
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
    output:
        cl66_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl66_fits_{var}" + PNG_EXT)
    params:
        model = MODEL_NAME,
        parameter = "{var}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        thres="CL66",
        best_fits_percent = config['best_fits_percent'],
        logspace = config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.tasks.pe_parameter_density_analysis import pe_parameter_density_analysis
        pe_parameter_density_analysis(params.model,
                                      input.file_all_fits,
                                      params.parameter,
                                      input.file_param_estim_summary,
                                      params.plots_dir,
                                      params.thres,
                                      params.best_fits_percent,
                                      params.logspace,
                                      params.scientific_notation)


rule sbpipe_parameter_density_analysis_cl95_fits_estim:
    input:
        file_all_fits=os.path.join(WORKING_FOLDER, ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
    WORKING_FOLDER, ALL_ESTIM + CSV_EXT),
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
    output:
        cl95_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl95_fits_{var}" + PNG_EXT)
    params:
        model = MODEL_NAME,
        parameter = "{var}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        thres="CL95",
        best_fits_percent = config['best_fits_percent'],
        logspace = config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.tasks.pe_parameter_density_analysis import pe_parameter_density_analysis
        pe_parameter_density_analysis(params.model,
                                      input.file_all_fits,
                                      params.parameter,
                                      input.file_param_estim_summary,
                                      params.plots_dir,
                                      params.thres,
                                      params.best_fits_percent,
                                      params.logspace,
                                      params.scientific_notation)


rule sbpipe_parameter_density_analysis_cl99_fits_estim:
    input:
        file_all_fits=os.path.join(WORKING_FOLDER, ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
    WORKING_FOLDER, ALL_ESTIM + CSV_EXT),
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
    output:
        cl99_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl99_fits_{var}" + PNG_EXT)
    params:
        model = MODEL_NAME,
        parameter = "{var}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        thres="CL99",
        best_fits_percent = config['best_fits_percent'],
        logspace = config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.tasks.pe_parameter_density_analysis import pe_parameter_density_analysis
        pe_parameter_density_analysis(params.model,
                                      input.file_all_fits,
                                      params.parameter,
                                      input.file_param_estim_summary,
                                      params.plots_dir,
                                      params.thres,
                                      params.best_fits_percent,
                                      params.logspace,
                                      params.scientific_notation)


rule sbpipe_parameter_density_analysis_all_fits_estim:
    input:
        file_all_fits=os.path.join(WORKING_FOLDER, ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
    WORKING_FOLDER, ALL_ESTIM + CSV_EXT),
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
    output:
        all_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_all_fits_{var}" + PNG_EXT)
    params:
        model = MODEL_NAME,
        parameter = "{var}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        thres="All",
        best_fits_percent = config['best_fits_percent'],
        logspace = config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.tasks.pe_parameter_density_analysis import pe_parameter_density_analysis
        pe_parameter_density_analysis(params.model,
                                      input.file_all_fits,
                                      params.parameter,
                                      input.file_param_estim_summary,
                                      params.plots_dir,
                                      params.thres,
                                      params.best_fits_percent,
                                      params.logspace,
                                      params.scientific_notation)






#######################################################################

#
# rule sbpipe_pe_analysis_best_fits:
#     input:
#         file_best_fits=os.path.join(WORKING_FOLDER, "final_estim_collection" + CSV_EXT)
#     output:
#         file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_{best_fits_plots}" + PNG_EXT), best_fits_plots=BEST_FITS_PLOTS)
#     params:
#         model=MODEL_NAME,
#         outputdir=WORKING_FOLDER,
#         plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
#         best_fits_percent=config['best_fits_percent'],
#         logspace=config['logspace'],
#         scientific_notation=config['scientific_notation']
#     run:
#         from sbpipe.tasks.pe_analyse_data_best_fits import pe_analyse_data_best_fits
#         pe_analyse_data_best_fits(params.model,
#                                   params.outputdir,
#                                   os.path.basename(input.file_best_fits),
#                                   params.plots_dir,
#                                   params.best_fits_percent,
#                                   params.logspace,
#                                   params.scientific_notation)
#
#
# rule sbpipe_pe_analysis_all_fits:
#     input:
#         file_all_fits=os.path.join(WORKING_FOLDER, "all_estim_collection" + CSV_EXT)
#     output:
#         file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_{all_fits_plots}" + PNG_EXT), all_fits_plots=ALL_FITS_PLOTS),
#         file_param_estim_details=os.path.join(WORKING_FOLDER, "param_estim_details" + CSV_EXT),
#         file_param_estim_summary=os.path.join(WORKING_FOLDER, "param_estim_summary" + CSV_EXT)
#     params:
#         model=MODEL_NAME,
#         outputdir=WORKING_FOLDER,
#         plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
#         data_point_num=config['data_point_num'],
#         plot_2d_66cl_corr=config['plot_2d_66cl_corr'],
#         plot_2d_95cl_corr=config['plot_2d_95cl_corr'],
#         plot_2d_99cl_corr=config['plot_2d_99cl_corr'],
#         logspace=config['logspace'],
#         scientific_notation=config['scientific_notation']
#     run:
#         from sbpipe.tasks.pe_analyse_data_all_fits import pe_analyse_data_all_fits
#         pe_analyse_data_all_fits(params.model,
#                                  params.outputdir,
#                                  os.path.basename(input.file_all_fits),
#                                  os.path.basename(output.file_param_estim_details),
#                                  os.path.basename(output.file_param_estim_summary),
#                                  params.plots_dir,
#                                  params.data_point_num,
#                                  params.plot_2d_66cl_corr,
#                                  params.plot_2d_95cl_corr,
#                                  params.plot_2d_99cl_corr,
#                                  params.logspace,
#                                  params.scientific_notation)
#
#



#######################################################################

















# rule sbpipe_pe_latex_report:
#     input:
#         best_fits_plots = expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_{best_fits_plots}" + PNG_EXT),
#                         best_fits_plots=BEST_FITS_PLOTS),
#         all_fits_plots=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_{all_fits_plots}" + PNG_EXT), all_fits_plots=ALL_FITS_PLOTS),
#         file_param_estim_details = os.path.join(WORKING_FOLDER, "param_estim_details" + CSV_EXT),
#         file_param_estim_summary = os.path.join(WORKING_FOLDER, "param_estim_summary" + CSV_EXT)
#     output:
#         file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
#     params:
#         working_folder_dir=WORKING_FOLDER,
#         plots_folder=PLOTS_FOLDER,
#         report_prefix=REPORT_PREFIX,
#         model_name=MODEL_NAME
#     run:
#         from sbpipe.report.latex_reports import latex_report_pe
#         latex_report_pe(params.working_folder_dir,
#                         params.plots_folder,
#                         params.model_name,
#                         params.report_prefix)
#
#
# rule sbpipe_pdf_report:
#     input:
#         file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
#     output:
#         file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + PDF_EXT)
#     params:
#         working_folder_dir=WORKING_FOLDER,
#         latex_file=REPORT_PREFIX + MODEL_NAME + LATEX_EXT
#     run:
#         from sbpipe.report.latex_reports import pdf_report
#         pdf_report(params.working_folder_dir,
#                    params.latex_file)
