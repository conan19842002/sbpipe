# snakemake pipeline
#
# This file is part of sbpipe.
#
# sbpipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sbpipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with sbpipe.  If not, see <http://www.gnu.org/licenses/>.


"""
Author: Piero Dalle Pezze
Affiliation: The Babraham Institute (Cambridge, UK)
Aim: A Snakemake workflow to process parameter estimation of a mathematical model.
Date: 30 Mar 2017
Run: snakemake -s sbpipe_pe.snake --configfile FILE
Latest modification:
    - first draft
"""



import sys
import os

# retrieve SBpipe package path
SBPIPE = os.path.abspath(os.path.join(__file__, os.pardir, os.pardir))
sys.path.insert(0, SBPIPE)

# Simulator
COPASI = False
if config['simulator'] == 'Copasi':
    COPASI = True

# Model and results folders
MODELS_FOLDER   = "Models"
MODEL           = os.path.join(MODELS_FOLDER , config['model'])
MODEL_NAME      = config['model'].split('.')[0]
REPORT_PREFIX   = "report_pe_"
WORKING_FOLDER  = os.path.join("Results", MODEL_NAME)
PREPROC_FOLDER  = "pe_preproc"
POSTPROC_FOLDER = "pe_postproc"
PLOTS_FOLDER    = "pe_plots"

# Extensions
MODEL_EXT       = "." + config['model'].split('.')[1]
CSV_EXT         = ".csv"
PNG_EXT         = ".png"
LATEX_EXT       = ".tex"
PDF_EXT         = ".pdf"
LOG_EXT         = ".log"

# Generate sequences
REPEATS     = range(1, int(config['runs'])+1)

# Report variables
VARIABLES = config['report_variables']

PLOT_TYPES = ['objval_vs_iter']

for var in VARIABLES:
    PLOT_TYPES.extend(['approx_ple_'+var, 'best_fits_'+var])

# Plot types
if config['plot_2d_66cl_corr']:
    for idx, var in enumerate(VARIABLES):
        PLOT_TYPES.append('cl66_fits_'+var)
        for var2 in VARIABLES[idx+1:]:
            PLOT_TYPES.append('cl66_fits_'+var+'_'+var2)

if config['plot_2d_95cl_corr']:
    for idx, var in enumerate(VARIABLES):
        PLOT_TYPES.append('cl95_fits_'+var)
        for var2 in VARIABLES[idx+1:]:
            PLOT_TYPES.append('cl95_fits_'+var+'_'+var2)

if config['plot_2d_99cl_corr']:
    for idx, var in enumerate(VARIABLES):
        PLOT_TYPES.append('cl99_fits_'+var)
        for var2 in VARIABLES[idx+1:]:
            PLOT_TYPES.append('cl99_fits_'+var+'_'+var2)

EXP_DATASET = config["exp_dataset"]

# Snakemake input / output files
DATASET_MODELS   = os.path.join(MODELS_FOLDER, EXP_DATASET)
DATASET_PREPROC  = os.path.join(WORKING_FOLDER, PREPROC_FOLDER, EXP_DATASET)
PREPROC_MODELS   = expand(os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT), rep=REPEATS)
PREPROC_REPORTS  = expand(os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT), rep=REPEATS)
POSTPROC_REPORTS = expand(os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT), rep=REPEATS)
BESTFITS_FILE    = os.path.join(WORKING_FOLDER, "final_estim_collection" + CSV_EXT)
ALLFITS_FILE     = os.path.join(WORKING_FOLDER, "all_estim_collection" + CSV_EXT)
PARAM_ESTIM_DETAILS_FILE = os.path.join(WORKING_FOLDER, "param_estim_details" + CSV_EXT)
PARAM_ESTIM_SUMMARY_FILE = os.path.join(WORKING_FOLDER, "param_estim_summary" + CSV_EXT)
PLOTS            = expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_{type}" + PNG_EXT), type=PLOT_TYPES)
LATEX_REPORT     = os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + ".tex")
PDF_REPORT       = os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + ".pdf")



rule all:
    input:
        dataset_models=DATASET_MODELS,
        dataset_preproc=DATASET_PREPROC,
        models=PREPROC_MODELS,
        reports1=PREPROC_REPORTS,
        reports2=POSTPROC_REPORTS,
        report3=BESTFITS_FILE,
        report4=ALLFITS_FILE,
        plots=PLOTS,
        latex=LATEX_REPORT,
        pdf=PDF_REPORT


rule copy_dataset:
    input:
        exp_dataset=DATASET_MODELS
    output:
        exp_dataset=DATASET_PREPROC
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from shutil import copyfile
        copyfile(input.exp_dataset, output.exp_dataset)


rule sbpipe_preproc:
    input:
        file=MODEL
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.tasks.preproc import preproc
        preproc(input.file, output.file, COPASI)


rule sbpipe_gen_data:
    input:
        exp_dataset=DATASET_PREPROC,
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.tasks.generate_data import generate_data
        generate_data(input.file, COPASI)


rule sbpipe_pe_postproc:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.tasks.pe_postproc import pe_postproc
        pe_postproc(input.file, output.file, COPASI)


rule sbpipe_pe_collect:
    input:
        file=POSTPROC_REPORTS
    output:
        file_best_fits=BESTFITS_FILE,
        file_all_fits=ALLFITS_FILE
    params:
        inputdir=POSTPROC_FOLDER,
        outputdir=WORKING_FOLDER
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        import os
        from sbpipe.tasks.pe_collect import pe_collect
        pe_collect(os.path.join(params.outputdir, params.inputdir), \
                   params.outputdir, \
                   os.path.basename(output.file_best_fits), \
                   os.path.basename(output.file_all_fits))


rule sbpipe_pe_analysis:
    input:
        file_best_fits=BESTFITS_FILE,
        file_all_fits=ALLFITS_FILE
    output:
        file=PLOTS,
        file_param_estim_details=PARAM_ESTIM_DETAILS_FILE,
        file_param_estim_summary=PARAM_ESTIM_SUMMARY_FILE
    params:
        model=MODEL_NAME,
        outputdir=WORKING_FOLDER,
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        best_fits_percent=config['best_fits_percent'],
        data_point_num=config['data_point_num'],
        plot_2d_66cl_corr=config['plot_2d_66cl_corr'],
        plot_2d_95cl_corr=config['plot_2d_95cl_corr'],
        plot_2d_99cl_corr=config['plot_2d_99cl_corr'],
        logspace=config['logspace'],
        scientific_notation=config['scientific_notation']
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.tasks.pe_analyse_data import pe_analyse_data
        pe_analyse_data(params.model, \
                        params.outputdir, \
                        os.path.basename(input.file_best_fits), \
                        os.path.basename(input.file_all_fits), \
                        os.path.basename(output.file_param_estim_details), \
                        os.path.basename(output.file_param_estim_summary), \
                        params.plots_dir, \
                        params.best_fits_percent, \
                        params.data_point_num, \
                        params.plot_2d_66cl_corr, \
                        params.plot_2d_95cl_corr, \
                        params.plot_2d_99cl_corr, \
                        params.logspace, \
                        params.scientific_notation)


rule sbpipe_pe_latex_report:
    input:
        file=PLOTS
    output:
        file=LATEX_REPORT
    params:
        working_folder_dir=WORKING_FOLDER,
        plots_folder=PLOTS_FOLDER,
        report_prefix=REPORT_PREFIX,
        model_name=MODEL_NAME
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.report.latex_reports import latex_report_pe
        latex_report_pe(params.working_folder_dir, params.plots_folder, params.model_name, params.report_prefix)


rule sbpipe_pdf_report:
    input:
        file=LATEX_REPORT
    output:
        file=PDF_REPORT
    params:
        working_folder_dir=WORKING_FOLDER,
        latex_file=REPORT_PREFIX + MODEL_NAME + LATEX_EXT
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.report.latex_reports import pdf_report
        pdf_report(params.working_folder_dir, params.latex_file)
