#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# This file is part of sb_pipe.
#
# sb_pipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sb_pipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with sb_pipe.  If not, see <http://www.gnu.org/licenses/>.
#
#
#
# $Revision: 1.0 $
# $Author: Piero Dalle Pezze $
# $Date: 2010-07-13 12:14:32 $
# $Id: latex_report.py,v 1.0 2010-07-13 12:45:32 Piero Dalle Pezze Exp $



# Utilities for changing column names generated by copasi time course reports

import sys
import os, glob
import re



# Replaces a group of annotation strings from a generated copasi report file
# Input parameters
# path:		The path of the copasi report
# report_name:	The name of the report
def replace_str_copasi_sim_report(path, report):

  # Replace the previous strings in the following file:
  report_with_path = os.path.join(path, report[:-4]+".csv")

  # The with statement ensures that the file is closed correctly, 
  # and re-opening the file in "w" mode empties the file before you write to it. 
  # re.sub(pattern, replace, string) is the equivalent of s/pattern/replace/ in sed.
  with open(report_with_path, "r") as sources:
    lines = sources.readlines()
  with open(report_with_path, "w") as sources:
    #for idx, line in lines:
    for i in range(len(lines)):
	if i < 1:
	  # First remove non-alphanumerics and non-underscores. 
	  # Then replaces whites with TAB.
	  # Finally use rstrip to remove the TAB at the end.
	  # [^\w] matches anything that is not alphanumeric or underscore
	  sources.write(
	    re.sub(r"\s+", '\t', re.sub(r'[^\w]', " ", lines[i])).rstrip('\t') + '\n')
	else:
	  sources.write(lines[i].rstrip('\t'))  

