# snakemake pipeline
#
# This file is part of sbpipe.
#
# sbpipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sbpipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with sbpipe.  If not, see <http://www.gnu.org/licenses/>.
#
#
#
# $Revision: 1.0 $
# $Author: Piero Dalle Pezze $
# $Date: 2017-01-23 23:43:32 $


# CALL: snakemake -s ps2_copasi.snake --configfile FILE
# where FILE is a config.yaml file


rule all:
    input:
        config["plot"],
        config["pdf_report"]


rule preproc:
    input:
        file=config["model"]
    output:
        file=config["preproc_model"]
    log:
        file=config["log"]
    run:
        SBPIPE = os.environ["SBPIPE"]
        sys.path.insert(0, SBPIPE)
        from sbpipe.snakemake.preproc import copasi_preproc
        copasi_preproc(input.file, output.file)


rule gen_data:
    input:
        file=config["preproc_model"]
    output:
        file=config["preproc_report"]
    log:
        file=config["log"]
    run:
        SBPIPE = os.environ["SBPIPE"]
        sys.path.insert(0, SBPIPE)
        from sbpipe.snakemake.generate_data import run_copasi_model
        run_copasi_model(input.file)


rule ps2_postproc:
    input:
        file=config["preproc_report"]
    output:
        file=config["postproc_report"]
    params:
        sim_length=config["sim_length"],
        runs=config["runs"]
    log:
        config["log"]
    run:
        SBPIPE = os.environ["SBPIPE"]
        sys.path.insert(0, SBPIPE)
        from sbpipe.snakemake.ps2_postproc import generic_postproc
        generic_postproc(input.file, output.file, params.sim_length)


rule ps2_analysis:
    input:
        file=config["postproc_report"]
    output:
        file=config["plot"]
    params:
        model_name=config["model_name"],
        postproc_dir=config["postproc_dir"],
        scanned_par1=config["scanned_par1"],
        scanned_par2=config["scanned_par2"],
        plots_dir=config["plots_dir"],
        runs=config["runs"]
    log:
        file=config["log"]
    shell:
        # NOTE: for this analysis, one can iterate over params.runs
        "Rscript --vanilla ~/local_software/sbpipe/sbpipe/R/sbpipe_ps2_main.r {params.model_name} "
        "{params.scanned_par1} {params.scanned_par2} {params.postproc_dir} {params.plots_dir} {params.runs}"


rule ps2_latex_report:
    input:
        file=config["plot"]
    output:
        file=config["latex_report"]
    params:
        model_name=config["model_name"],
        working_folder_dir=config["working_folder_dir"],
        plots_dir=config["plots_dir"],
        scanned_par1=config["scanned_par1"],
        scanned_par2=config["scanned_par2"],
    log:
        file=config["log"]
    run:
        SBPIPE = os.environ["SBPIPE"]
        sys.path.insert(0, SBPIPE)
        from sbpipe.report.latex_reports import latex_report_ps2
        plots_folder = params.plots_dir.replace(params.working_folder_dir,"")
        latex_report_ps2(params.working_folder_dir, plots_folder, 'report__ps2_', params.model_name,
                     params.scanned_par1, params.scanned_par2)


rule ps2_pdf_report:
    input:
        file=config["latex_report"]
    output:
        file=config["pdf_report"]
    params:
        working_folder_dir=config["working_folder_dir"],
    log:
        file=config["log"]
    run:
        SBPIPE = os.environ["SBPIPE"]
        sys.path.insert(0, SBPIPE)
        from sbpipe.report.latex_reports import pdf_report
        latex_file = input.file.replace(params.working_folder_dir, '')
        pdf_report(params.working_folder_dir, latex_file)

