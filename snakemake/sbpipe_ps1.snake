# snakemake pipeline
#
# This file is part of sbpipe.
#
# sbpipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sbpipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with sbpipe.  If not, see <http://www.gnu.org/licenses/>.


"""
Author: Piero Dalle Pezze
Affiliation: The Babraham Institute (Cambridge, UK)
Aim: A Snakemake workflow to process single parameter scans of a mathematical model.
Date: 31 Jan 2017
Run: snakemake -s ps1.snake --configfile FILE
Latest modification:
    - TODO: replace __eval_Insulin and __scan_IR_beta with arbitrary text
    - first draft
"""



import sys
import os

SBPIPE = os.environ["SBPIPE"]
sys.path.insert(0, SBPIPE)

# Simulator
COPASI = False
if config['simulator'] == 'Copasi':
    COPASI = True

# Model and results folders
MODEL           = os.path.join("Models", config['model'])
MODEL_NAME      = config['model'].split('.')[0]
REPORT_PREFIX   = "report_ps1_"
WORKING_FOLDER  = os.path.join("Working_Folder", MODEL_NAME)
PREPROC_FOLDER  = "ps1_preproc"
POSTPROC_FOLDER = "ps1_postproc"
PLOTS_FOLDER    = "ps1_plots"

# Extensions
MODEL_EXT       = "." + config['model'].split('.')[1]
CSV_EXT         = ".csv"
PNG_EXT         = ".png"
LATEX_EXT       = ".tex"
PDF_EXT         = ".pdf"
LOG_EXT         = ".log"

# Generate sequences
REPEATS     = range(1, int(config['runs'])+1)

# Snakemake input / output files
PREPROC_MODELS   = expand(os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT), rep=REPEATS)
PREPROC_REPORTS  = expand(os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT), rep=REPEATS)
POSTPROC_REPORTS = expand(os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT), rep=REPEATS)
PLOTS            = expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "__scan_IR_beta__rep_{rep}__eval_Insulin" + PNG_EXT), rep=REPEATS)
LATEX_REPORT     = os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + ".tex")
PDF_REPORT       = os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + ".pdf")



rule all:
    input:
        models=PREPROC_MODELS,
        reports1=PREPROC_REPORTS,
        reports2=POSTPROC_REPORTS,
        plots=PLOTS,
        latex=LATEX_REPORT,
        pdf=PDF_REPORT


rule sbpipe_preproc:
    input:
        file=MODEL
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.tasks.preproc import preproc
        preproc(input.file, output.file, COPASI)


rule sbpipe_gen_data:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.tasks.generate_data import generate_data
        generate_data(input.file, COPASI)


rule sbpipe_ps1_postproc:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    params:
        scanned_par=config["scanned_par"],
        sim_intervals=config["simulate__intervals"],
        ps1_intervals=config["levels_number"]
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.tasks.ps1_postproc import ps1_postproc
        ps1_postproc(input.file, output.file, params.scanned_par, params.sim_intervals, params.ps1_intervals, COPASI)


rule sbpipe_ps1_analysis:
    input:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "__scan_IR_beta__rep_{rep}__eval_Insulin" + PNG_EXT)
    params:
        model_name=MODEL_NAME,
        scanned_par=config["scanned_par"],
        inhibition_only=config["single_param_scan_knock_down_only"],
        outputdir=WORKING_FOLDER,
        sim_data_folder=POSTPROC_FOLDER,
        sim_plots_folder=PLOTS_FOLDER,
        repeat='{rep}',
        percent_levels=config["single_param_scan_percent_levels"],
        min_level=config["min_level"],
        max_level=config["max_level"],
        levels_number=config["levels_number"],
        homogeneous_lines=config["homogeneous_lines"],
        xaxis_label=config["xaxis_label"],
        yaxis_label=config["yaxis_label"]
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.tasks.ps1_analyse_data import ps1_analyse_data
        ps1_analyse_data(params.model_name, params.scanned_par, str(params.inhibition_only), params.outputdir, \
        params.sim_data_folder, params.sim_plots_folder, params.repeat, str(params.percent_levels), \
        str(params.min_level), str(params.max_level), str(params.levels_number), str(params.homogeneous_lines), \
        params.xaxis_label, params.yaxis_label)


rule sbpipe_ps1_latex_report:
    input:
        file=PLOTS
    output:
        file=LATEX_REPORT
    params:
        working_folder_dir=WORKING_FOLDER,
        plots_folder=PLOTS_FOLDER,
        report_prefix=REPORT_PREFIX,
        model_name=MODEL_NAME,
        scanned_par=config["scanned_par"]
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.report.latex_reports import latex_report_ps1
        latex_report_ps1(params.working_folder_dir, params.plots_folder, params.report_prefix, params.model_name,
                     params.scanned_par)


rule sbpipe_pdf_report:
    input:
        file=LATEX_REPORT
    output:
        file=PDF_REPORT
    params:
        working_folder_dir=WORKING_FOLDER,
        latex_file=REPORT_PREFIX + MODEL_NAME + LATEX_EXT
    log:
        "log/" + MODEL_NAME + LOG_EXT
    run:
        from sbpipe.report.latex_reports import pdf_report
        pdf_report(params.working_folder_dir, params.latex_file)

