# snakemake pipeline
#
# This file is part of sbpipe.
#
# sbpipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sbpipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with sbpipe.  If not, see <http://www.gnu.org/licenses/>.
#
#
#
# $Revision: 1.0 $
# $Author: Piero Dalle Pezze $
# $Date: 2017-01-23 23:43:32 $


# CALL: snakemake -s ps2_copasi.snake --configfile FILE
# where FILE is a config.yaml file


import sys
import os

SBPIPE = os.environ["SBPIPE"]

MODEL           = os.path.join("Models", config['model'])
MODEL_NAME      = config['model'].split('.')[0]
REPORT_PREFIX   = "report_ps2_"
WORKING_FOLDER  = os.path.join("Working_Folder", MODEL_NAME)
PREPROC_FOLDER  = "ps2_preproc"
POSTPROC_FOLDER = "ps2_postproc"
PLOTS_FOLDER    = "ps2_plots"

# Extensions
MODEL_EXT       = "." + config['model'].split('.')[1]
CSV_EXT         = ".csv"
PNG_EXT         = ".png"
LATEX_EXT       = ".tex"
PDF_EXT         = ".pdf"
LOG_EXT         = ".log"

# Generate sequences
REPEATS     = range(1, int(config['runs'])+1)
TIME_POINTS = range(0, config['sim_length'])

# Snakemake input / output files
PREPROC_MODELS   = expand(os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_" + "{rep}" + MODEL_EXT), rep=REPEATS)
PREPROC_REPORTS  = expand(os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_" + "{rep}" + CSV_EXT), rep=REPEATS)
POSTPROC_REPORTS = expand(os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_" + "{rep}" + CSV_EXT), rep=REPEATS)
PLOTS            = expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "__eval_Insulin__rep_{rep}__tp_{tp}" + PNG_EXT), rep=REPEATS, tp=TIME_POINTS)
LATEX_REPORT     = os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + ".tex")
PDF_REPORT       = os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + ".pdf")

rule all:
    input:
        models=PREPROC_MODELS,
        reports1=PREPROC_REPORTS,
        reports2=POSTPROC_REPORTS,
        plots=PLOTS,
        latex=LATEX_REPORT,
        pdf=PDF_REPORT


rule preproc:
    input:
        file=MODEL
    output:
        files=PREPROC_MODELS
    log:
        file=MODEL_NAME + LOG_EXT
    run:
        SBPIPE = os.environ["SBPIPE"]
        sys.path.insert(0, SBPIPE)
        from sbpipe.snakemake.preproc import copasi_preproc
        #TODO is there a way to replace the loop with `{rep}` directly?
        for output in output.files:
            copasi_preproc(input.file, output)


rule gen_data:
    input:
        files=PREPROC_MODELS
    output:
        files=PREPROC_REPORTS
    log:
        file=MODEL_NAME + LOG_EXT
    run:
        SBPIPE = os.environ["SBPIPE"]
        sys.path.insert(0, SBPIPE)
        from sbpipe.snakemake.generate_data import run_copasi_model
        #TODO is there a way to replace the loop with `{rep}` directly?
        for input in input.files:
            run_copasi_model(input)


rule ps2_postproc:
    input:
        files=PREPROC_REPORTS
    output:
        files=POSTPROC_REPORTS
    params:
        sim_length=config["sim_length"],
        runs=config["runs"]
    log:
        file=MODEL_NAME + LOG_EXT
    run:
        SBPIPE = os.environ["SBPIPE"]
        sys.path.insert(0, SBPIPE)
        from sbpipe.snakemake.ps2_postproc import generic_postproc
        #TODO is there a way to replace the loop with `{rep}` directly?
        for i in REPEATS:
            generic_postproc(input.files[i-1], output.files[i-1], params.sim_length)


rule ps2_analysis:
    input:
        files=POSTPROC_REPORTS
    output:
        files=PLOTS
    params:
        rscript=os.path.join(SBPIPE, 'sbpipe', 'R', 'sbpipe_ps2_main.r'),
        model_name=MODEL_NAME,
        postproc_dir=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER),
        scanned_par1=config["scanned_par1"],
        scanned_par2=config["scanned_par2"],
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        runs=config["runs"]
    log:
        file=MODEL_NAME + LOG_EXT
    shell:
        # NOTE: for this analysis, one can iterate over params.runs
        "Rscript --vanilla {params.rscript} {params.model_name} "
        "{params.scanned_par1} {params.scanned_par2} {params.postproc_dir} {params.plots_dir} {params.runs}"


rule ps2_latex_report:
    input:
        files=PLOTS
    output:
        file=LATEX_REPORT
    params:
        working_folder_dir=WORKING_FOLDER,
        plots_folder=PLOTS_FOLDER,
        report_prefix=REPORT_PREFIX,
        model_name=MODEL_NAME,
        scanned_par1=config["scanned_par1"],
        scanned_par2=config["scanned_par2"]
    log:
        file=MODEL_NAME + LOG_EXT
    run:
        SBPIPE = os.environ["SBPIPE"]
        sys.path.insert(0, SBPIPE)
        from sbpipe.report.latex_reports import latex_report_ps2
        latex_report_ps2(params.working_folder_dir, params.plots_folder, params.report_prefix, params.model_name,
                     params.scanned_par1, params.scanned_par2)


rule ps2_pdf_report:
    input:
        file=LATEX_REPORT
    output:
        file=PDF_REPORT
    params:
        working_folder_dir=WORKING_FOLDER,
        latex_file=REPORT_PREFIX + MODEL_NAME + LATEX_EXT
    log:
        file=MODEL_NAME + LOG_EXT
    run:
        SBPIPE = os.environ["SBPIPE"]
        sys.path.insert(0, SBPIPE)
        from sbpipe.report.latex_reports import pdf_report
        pdf_report(params.working_folder_dir, params.latex_file)

