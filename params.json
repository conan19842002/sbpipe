{
  "name": "SB pipe",
  "tagline": "Pipelines for systems modelling of biological networks",
  "body": "# User manual\r\n\r\nMailing list: sb_pipe AT googlegroups.com\r\n\r\nForum: [https://groups.google.com/forum/#!forum/sb_pipe](https://groups.google.com/forum/#!forum/sb_pipe)\r\n\r\n[![Build Status](https://travis-ci.org/pdp10/sb_pipe.svg?branch=master)](https://travis-ci.org/pdp10/sb_pipe)\r\n\r\n[![LGPLv3 License](http://img.shields.io/badge/license-LGPLv3-blue.svg)](https://www.gnu.org/licenses/lgpl.html)\r\n\r\n\r\n## Introduction\r\nThis package contains a collection of pipelines for dynamic modelling of biological systems. \r\nIt aims to automate common processes and speed up productivity for tasks such as model simulation, \r\nsingle and double parameter scan, and parameter estimation. \r\n\r\n\r\n### Requirements\r\nIn order to use sb_pipe, the following software must be installed:\r\n\r\n- Copasi 4.16 - [http://copasi.org/](http://copasi.org/)\r\n- Python 2.7+ - [https://www.python.org/](https://www.python.org/)\r\n- R 3.3.0+ - [https://cran.r-project.org/](https://cran.r-project.org/)\r\n- LaTeX 2013 (optional) [https://latex-project.org/ftp.html](https://latex-project.org/ftp.html)\r\n\r\nYou should also make sure that the following packages are installed in \r\nyour machine: `python-pip`, and (optionally) `texlive-latex-base`.\r\n\r\nBefore installing sb_pipe Python and R dependencies the following \r\nenvironment variables must be added to your GNU/Linux $HOME/.bashrc file:\r\n\r\n```\r\n# SB_PIPE\r\nexport SB_PIPE=/path/to/sb_pipe\r\nexport PATH=$PATH:${SB_PIPE}/sb_pipe\r\n\r\n# Path to CopasiSE\r\nexport PATH=$PATH:/path/to/CopasiSE\r\n```\r\n\r\nThe .bashrc file can then be reloaded from your shell using the command: \r\n```\r\n$ source $HOME/.bashrc\r\n```\r\n\r\nOn Windows platforms, these environment variables are configured as any other \r\nWindows environment variable.\r\n\r\nNow it is the time to install Python and R packages used by sb_pipe. Two scripts \r\nare provided to perform these tasks automatically. \r\n\r\nTo install sb_pipe Python dependencies, run:\r\n```\r\ncd ${SB_PIPE}/\r\n./install_pydeps.py\r\n```\r\n\r\nTo install sb_pipe R dependencies, run:\r\n```\r\ncd ${SB_PIPE}/\r\n$ R\r\n# Inside R environment, answer 'y' to install packages locally\r\n> source('install_rdeps.r')\r\n```\r\n\r\nIf R package dependencies must be compiled, it is worth checking that the following additional packages are installed in your machine: `build-essential`, `liblapack-dev`, `libblas-dev`, `libcairo-dev`, `libssl-dev`, `libcurl4-openssl-dev`. After installing these packages, `install_rdeps.r` must be executed again.\r\n\r\n\r\n### Installation\r\nRun the command inside the sb_pipe folder: \r\n```\r\npython setup.py install\r\n```\r\nThe correct installation of sb_pipe and its dependencies can be checked by \r\nrunning the following commands inside the sb_pipe folder: \r\n```\r\ncd tests\r\n./test_suite.py\r\n```\r\n\r\n## How to use sb_pipe\r\n\r\n### Preliminary configuration steps\r\n\r\n#### Pipelines using Copasi\r\nBefore using these pipelines, a Copasi model must be configured as follow using CopasiUI:\r\n\r\n**pipeline: simulate**\r\n\r\n- Tick the flag _executable_ in the Time Course Task.\r\n- Select a report template for the Time Course Task.\r\n- Save the report in the same folder with the same name as the model but replacing the extension .cps with .csv.\r\n\r\n**pipeline: single or double parameter scan**\r\n\r\n- Tick the flag _executable_ in the Parameter Scan Task.\r\n- Select a report template for the Parameter Scan Task.\r\n- Save the report in the same folder with the same name as the model but replacing the extension .cps with .csv.\r\n\r\n**pipeline: param-estim**\r\n\r\n- Tick the flag _executable_ in the Parameter Estimation Task.\r\n- Select the report template for the Parameter Estimation Task.\r\n- Save the report in the same folder with the same name as the model but replacing the extension .cps with .csv.\r\n\r\n\r\n### Running sb_pipe\r\nsb_pipe is executed via the command *run_sb_pipe.py*. The syntax for this command and its complete list \r\nof options can be retrieved by running *run_sb_pipe.py -h*. \r\n\r\nAs of Sep 2016 the output is as follows:\r\n```\r\npdp@ariel:~/sb_pipe$ run_sb_pipe.py -h\r\nUsage: run_sb_pipe.py [OPTION] [FILE]\r\nPipelines for systems modelling of biological networks.\r\n\r\nList of mandatory options:\r\n        -h, --help\r\n                Shows this help.\r\n        -c, --create-project\r\n                Create a project structure using the argument as name.\r\n        -s, --simulate\r\n                Simulate a model.\r\n        -p, --single-param-scan\r\n                Simulate a single parameter scan.\r\n        -d, --double-param-scan\r\n                Simulate a double parameter scan.\r\n        -e, --param-estim\r\n                Generate a parameter fit sequence.\r\nExit status:\r\n 0  if OK,\r\n 1  if minor problems (e.g., a pipeline did not execute correctly),\r\n 2  if serious trouble (e.g., cannot access command-line argument).\r\n\r\nReport bugs to sb_pipe@googlegroups.com\r\nsb_pipe home page: <https://pdp10.github.io/sb_pipe>\r\nFor complete documentation, see README.md .\r\n\r\n```\r\n\r\nThe first step is to create a new project. This can be done with the command:\r\n```\r\nrun_sb_pipe.py --create-project project_name\r\n```\r\n\r\nThis generates the following structure:\r\n```\r\nproject_name/\r\n    | - Data/\r\n    | - Models/\r\n    | - Working_Folder/\r\n```\r\nModels must be stored in the Models/ folder. The folder Data/ is meant for collecting experimental data files and analyses in one place. Once the data files for Copasi (e.g. for parameter estimation) are generated, **it is advised** to move them into the Models/ folder so that the Copasi (.cps) file and its associated experimental data files are stored in the same folder. To run sb_pipe, users need to create a configuration file \r\nfor each pipeline they intend to run (see next section). These configuration files should be placed in the Working_Folder/. This folder will eventually contain all the results generated by sb_pipe. \r\n\r\n\r\nFor instance, the pipeline for parameter estimation configured with a certain configuration file can be executed by typing:\r\n```\r\nrun_sb_pipe.py -e my_config_file.conf\r\n```\r\n\r\n\r\n### Pipeline configuration files\r\nPipelines are configured using files (here called configuration files). These files are INI files and are therefore structured as follows: \r\n```\r\n[pipeline_name]\r\noption1=value1\r\noption2=value2\r\n...\r\n```\r\n\r\nIn sb_pipe each pipeline executes three tasks: data generation, data analysis, and report generation. Each task depends on the previous one. This choice allows user to analyse the same data without having to generate it every time, or to skip the report generation if not wanted. \r\nAssuming that the configuration files are placed in the Working_Folder of a certain project, examples are given as follow: \r\n\r\n**Example 1:** configuration file for the pipeline *simulate*\r\n```\r\n[simulate]\r\n# True if data must be generated, False otherwise\r\ngenerate_data=True\r\n# True if data must be analysed, False otherwise\r\nanalyse_data=True\r\n# True if a report must be generated, False otherwise\r\ngenerate_report=True\r\n# The relative path to the project directory (from Working_Folder)\r\nproject_dir=..\r\n# The Copasi model name\r\nmodel=insulin_receptor_stoch.cps\r\n# The cluster type. pp if the model is run locally, sge/lsf if run on cluster.\r\ncluster=pp\r\n# The number of CPU if pp is used, ignored otherwise\r\npp_cpus=7\r\n# The number of simulations to perform. n>=1 for stochastic simulations.\r\nruns=40\r\n# The label for the x axis.\r\nsimulate__xaxis_label=Time [min]\r\n```\r\n\r\n**Example 2:** configuration file for the pipeline *single_param_scan*\r\n```\r\n[single_param_scan]\r\ngenerate_data=True\r\nanalyse_data=True\r\ngenerate_report=True\r\nproject_dir=..\r\nmodel=insulin_receptor_inhib_scan_IR_beta.cps\r\n# The variable to scan (as set in Copasi Parameter Scan Task)\r\nscanned_par=IR_beta\r\n# The number of intervals in the simulation\r\nsimulate__intervals=100\r\nsimulate__xaxis_label=Time [min]\r\n# The number of simulations to perform for each scan\r\nsingle_param_scan_simulations_number=1\r\n# True if the variable is only reduced (knock down), False otherwise.\r\nsingle_param_scan_knock_down_only=True\r\n# True if the scanning represents percent levels.\r\nsingle_param_scan_percent_levels=True\r\n# The minimum level (as set in Copasi Parameter Scan Task)\r\nmin_level=0\r\n# The maximum level (as set in Copasi Parameter Scan Task)\r\nmax_level=100\r\n# The number of scans (as set in Copasi Parameter Scan Task)\r\nlevels_number=10\r\n# True if plot lines are the same between scans (e.g. full lines, same colour)\r\nhomogeneous_lines=False\r\n```\r\n\r\n**Example 3:** configuration file for the pipeline *double_param_scan*\r\n```\r\n[double_param_scan]\r\ngenerate_data=True\r\nanalyse_data=True\r\ngenerate_report=True\r\nproject_dir=..\r\nmodel=insulin_receptor_inhib_dbl_scan_InsulinPercent__IRbetaPercent.cps\r\n# The 1st variable to scan (as set in Copasi Parameter Scan Task)\r\nscanned_par1=InsulinPercent\r\n# The 2nd variable to scan (as set in Copasi Parameter Scan Task)\r\nscanned_par2=IRbetaPercent\r\n# The length of the simulation (as set in Copasi Time Course Task)\r\nsim_length=10\r\n```\r\n\r\n**Example 4:** configuration file for the pipeline *param_estim*\r\n```\r\n[param_estim]\r\ngenerate_data=True\r\nanalyse_data=True\r\ngenerate_report=True\r\ngenerate_tarball=True\r\nproject_dir=..\r\nmodel=insulin_receptor_param_estim.cps\r\ncluster=pp\r\npp_cpus=7\r\n# The parameter estimation round which is used to distinguish \r\n# phases of parameter estimations when parameters cannot be \r\n# estimated at the same time\r\nround=1\r\n# The number of parameter estimations \r\n# (the length of the fit sequence)\r\nruns=40\r\n# The threshold percentage of the best fits to consider\r\nbest_fits_percent=75\r\n# The number of available data points\r\ndata_point_num=33\r\n# True if 2D all fits plots for 66% and 95% confidence levels \r\n# should be plotted. This is computationally expensive.\r\nplot_2d_66_95cl_corr=True\r\n# True if parameter values should plotted in log space.\r\nlogspace=True\r\n```\r\n\r\nAdditional examples of configuration files can be found in:\r\n```\r\n${SB_PIPE}/tests/insulin_receptor/Working_Folder/ \r\n```\r\n\r\n\r\n## How to report issues or request new features\r\nsb_pipe is a relatively young project and there is a chance that some error occurs. If this is the case, \r\nusers should report problems using the following mailing list: \r\n```\r\nsb_pipe AT googlegroups.com\r\n```\r\nTo help us better identify and reproduce your problem, some technical information is needed. This \r\ndetail data can be found in sb_pipe log files which are stored in ${HOME}/.sb_pipe/logs/. When using \r\nthe mailing list above, it would be worth providing this extra information.\r\n\r\nIssues and feature requests can also be notified using the github issue tracking system for sb_pipe \r\nat the web page: [https://github.com/pdp10/sb_pipe/issues](https://github.com/pdp10/sb_pipe/issues).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}